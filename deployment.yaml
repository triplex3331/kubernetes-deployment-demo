# Deployment для приложения с настройками масштабируемости и отказоустойчивости
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
  labels:
    app: my-app
spec:
  replicas: 4  # Начальное количество реплик, которое справляется с пиковой нагрузкой
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app-container
        image: my-app-image:latest  # Здесь указываем актуальный образ приложения
        resources:
          requests:
            memory: "128Mi"  # Минимальное потребление памяти
            cpu: "0.1"  # Минимальное потребление CPU
          limits:
            memory: "256Mi"  # Лимит памяти для предотвращения чрезмерного потребления
            cpu: "0.5"  # Лимит CPU для контроля ресурсов
        startupProbe:
          # Пробуем использовать стартовый Probe с ожиданием до 10 секунд для инициализации
          httpGet:
            path: /healthz
            port: 8080
          failureThreshold: 3
          periodSeconds: 5
          timeoutSeconds: 5
        livenessProbe:
          # Проверка живости приложения
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 60  # Задержка перед первым опросом
          periodSeconds: 10
        readinessProbe:
          # Проверка готовности приложения
          httpGet:
            path: /readiness
            port: 8080
          initialDelaySeconds: 30  # Задержка перед проверкой готовности
          periodSeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1  # Убираем один под при обновлениях, чтобы минимизировать потери

---
# Автоскейлер для динамического масштабирования подов на основе нагрузки
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: my-app-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-app
  minReplicas: 2  # Минимальное количество реплик ночью
  maxReplicas: 8  # Максимальное количество реплик в пиковой нагрузке
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50  # Порог по CPU для увеличения реплик
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 50  # Порог по памяти для увеличения реплик

---
# Ingress для управления входящими запросами
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-app-ingress
spec:
  rules:
  - host: my-app.example.com  # Замените на актуальный хост
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-app-service
            port:
              number: 8080

---
# Service для доступа к приложению внутри кластера
apiVersion: v1
kind: Service
metadata:
  name: my-app-service
spec:
  selector:
    app: my-app
  ports:
    - port: 8080
      targetPort: 8080  # Порт, на который будет доступен сервис
  type: ClusterIP  # Используем ClusterIP для доступа внутри кластера
